from aio_pika import Message, connect
'''
Библиотека asyncio является стандартной библиотекой Python, предназначенной
для написания асинхронного кода. Она предоставляет набор инструментов
и примитивов для организации асинхронных операций в приложениях.

Основные компоненты asyncio включают в себя:

Корутины (coroutines): Асинхронные функции, которые могут быть
приостановлены и возобновлены. Они обычно используются для выполнения
асинхронных операций.

Event Loop (Цикл событий): Центральная часть asyncio, обеспечивающая
управление выполнением корутин и событий.

Future (Будущее): Объекты, представляющие результат асинхронной операции,
которая ещё не завершена.

async/await: Синтаксический сахар, предоставляющий удобный способ
определения асинхронных функций и ожидания асинхронных операций.
'''
import asyncio

async def main() -> None:
    '''
    Асинхронное ключевое слово await используется для ожидания завершения 
    этой операции, так как она может занять некоторое время.
    '''
    connection = await connect("amqp://guest:guest@localhost/")
    
    '''
    Строка async with connection: в вашем коде используется для
    создания контекста управления соединением с RabbitMQ с использованием
    асинхронных операций.

    В асинхронном коде Python ключевое слово async with используется
    для создания асинхронного контекстного менеджера. В данном случае,
    контекстный менеджер connection является асинхронным, поскольку
    работает с асинхронными операциями, такими как установка и разрыв
    соединения с RabbitMQ.
    '''
    async with connection:
        channel = await connection.channel()
        
        queue = await channel.declare_queue('hello')
        
        '''
        В первом коде с использованием aio-pika, строка exchange='' 
        была опущена, потому что default_exchange в aio-pika представляет
        собой обмен по умолчанию (default exchange), который обычно
        используется для отправки сообщений в очередь напрямую по
        её имени (при этом игнорируется routing_key).
        '''
        await channel.default_exchange.publish(
            Message(b'Hello world'),
            routing_key=queue.name,
        )
        
        print(" [x] Sent 'Hello world!")
        
'''
Разница в использовании строки if __name__ == "__main__": asyncio.run(main())
связана с особенностями асинхронного программирования в Python и способом,
каким asyncio управляет выполнением асинхронных функций.

В асинхронном коде, написанном с использованием asyncio, основной
поток выполнения программы ожидает выполнения асинхронной функции
при помощи asyncio.run(main()). Это необходимо, чтобы запустить
асинхронную функцию main().

Строка if __name__ == "__main__": проверяет, запущен ли скрипт напрямую
(а не импортирован в другой скрипт). Если скрипт запущен напрямую, то
asyncio.run(main()) запустит асинхронную функцию main(). Это нужно,
потому что асинхронные функции не могут быть вызваны напрямую, они
должны быть запущены с использованием цикла событий asyncio.

С внесением асинхронных конструкций, таких как async def и await,
появилась необходимость в этой дополнительной строке для корректного
запуска асинхронного кода.
'''
if __name__=="__main__":
    asyncio.run(main())